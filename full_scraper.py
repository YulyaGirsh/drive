import requests
import os
import time
import json
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse

def create_directories():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if not os.path.exists('data'):
        os.makedirs('data')
    if not os.path.exists('data/images'):
        os.makedirs('data/images')
    if not os.path.exists('data/images/tickets'):
        os.makedirs('data/images/tickets')

def get_file_extension(url):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL"""
    parsed = urlparse(url)
    path = parsed.path
    if '.' in path:
        return path.split('.')[-1].lower()
    return 'jpg'

def download_image(url, filename):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        with open(filename, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {filename}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        return False

def parse_ticket(ticket_number):
    """–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞"""
    url = f"https://examenpdd.com/bilet/{ticket_number}"
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        print(f"üìã –ü–∞—Ä—Å–∏–º –±–∏–ª–µ—Ç {ticket_number}...")
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        questions = []
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_selectors = [
            '.question',
            '.question-item',
            '.ticket-question',
            '[class*="question"]',
            '.bilet-question'
        ]
        
        question_containers = []
        for selector in question_selectors:
            containers = soup.select(selector)
            if containers:
                question_containers = containers
                print(f"‚úì –ù–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                break
        
        if not question_containers:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            print("‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–∫—Å—Ç "–í–æ–ø—Ä–æ—Å"
            all_elements = soup.find_all(text=re.compile(r'–í–æ–ø—Ä–æ—Å\s+\d+', re.IGNORECASE))
            for element in all_elements:
                parent = element.parent
                while parent and parent.name != 'body':
                    if parent.get('class') and any('question' in cls.lower() for cls in parent.get('class')):
                        question_containers.append(parent)
                        break
                    parent = parent.parent
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(question_containers)}")
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
        for i, container in enumerate(question_containers[:20]):  # –ú–∞–∫—Å–∏–º—É–º 20 –≤–æ–ø—Ä–æ—Å–æ–≤
            question_data = parse_question(container, ticket_number, i + 1)
            if question_data:
                questions.append(question_data)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        if not questions:
            print(f"‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–∏–ª–µ—Ç–∞ {ticket_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏")
            for i in range(20):
                questions.append({
                    "question_number": i + 1,
                    "text": f"–í–æ–ø—Ä–æ—Å {i + 1} (–ë–∏–ª–µ—Ç {ticket_number})",
                    "answers": ["–í–∞—Ä–∏–∞–Ω—Ç –ê", "–í–∞—Ä–∏–∞–Ω—Ç –ë", "–í–∞—Ä–∏–∞–Ω—Ç –í", "–í–∞—Ä–∏–∞–Ω—Ç –ì"],
                    "correct_answer": 0,
                    "question_type": "multiple_choice",
                    "hint": "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "image": None,
                    "image_path": None
                })
        
        ticket_data = {
            "ticket_number": ticket_number,
            "total_questions": len(questions),
            "questions": questions,
            "scraped_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "source_url": url
        }
        
        return ticket_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–∏–ª–µ—Ç–∞ {ticket_number}: {e}")
        return None

def parse_question(container, ticket_number, question_number):
    """–ü–∞—Ä—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    try:
        question_data = {
            "question_number": question_number,
            "text": "",
            "answers": [],
            "correct_answer": 0,
            "question_type": "multiple_choice",
            "hint": "",
            "image": None,
            "image_path": None
        }
        
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        text_selectors = [
            '.question-text',
            '.question-title',
            '.question-content',
            'p',
            'div[class*="text"]'
        ]
        
        for selector in text_selectors:
            text_elem = container.select_one(selector)
            if text_elem and text_elem.get_text(strip=True):
                question_data["text"] = text_elem.get_text(strip=True)
                break
        
        if not question_data["text"]:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            question_data["text"] = container.get_text(strip=True)[:200] + "..."
        
        # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        answer_selectors = [
            '.answer',
            '.option',
            '.choice',
            'li',
            'div[class*="answer"]',
            'label'
        ]
        
        answers = []
        for selector in answer_selectors:
            answer_elements = container.select(selector)
            for elem in answer_elements:
                text = elem.get_text(strip=True)
                if text and len(text) > 1 and text not in answers:
                    answers.append(text)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        if not answers:
            answers = ["–í–∞—Ä–∏–∞–Ω—Ç –ê", "–í–∞—Ä–∏–∞–Ω—Ç –ë", "–í–∞—Ä–∏–∞–Ω—Ç –í", "–í–∞—Ä–∏–∞–Ω—Ç –ì"]
        
        question_data["answers"] = answers
        
        # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±—ã—á–Ω–æ –≤—ã–¥–µ–ª–µ–Ω –æ—Å–æ–±—ã–º –∫–ª–∞—Å—Å–æ–º)
        correct_selectors = [
            '.correct',
            '.right',
            '.true',
            '.answer-correct',
            '[class*="correct"]'
        ]
        
        for selector in correct_selectors:
            correct_elem = container.select_one(selector)
            if correct_elem:
                correct_text = correct_elem.get_text(strip=True)
                for i, answer in enumerate(answers):
                    if correct_text in answer or answer in correct_text:
                        question_data["correct_answer"] = i
                        break
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_elem = container.select_one('img')
        if img_elem:
            img_src = img_elem.get('src') or img_elem.get('data-src')
            if img_src:
                img_url = urljoin(f"https://examenpdd.com/bilet/{ticket_number}", img_src)
                question_data["image"] = img_url
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                ext = get_file_extension(img_url)
                img_filename = f"data/images/tickets/ticket_{ticket_number:02d}_question_{question_number:02d}.{ext}"
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∏–ª–µ—Ç–∞
                ticket_dir = f"data/images/tickets"
                if not os.path.exists(ticket_dir):
                    os.makedirs(ticket_dir)
                
                if download_image(img_url, img_filename):
                    question_data["image_path"] = img_filename
        
        # –ò—â–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        hint_selectors = [
            '.hint',
            '.explanation',
            '.tip',
            '.help',
            '[class*="hint"]',
            '[class*="explanation"]'
        ]
        
        for selector in hint_selectors:
            hint_elem = container.select_one(selector)
            if hint_elem:
                question_data["hint"] = hint_elem.get_text(strip=True)
                break
        
        if not question_data["hint"]:
            question_data["hint"] = "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        return question_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–æ–ø—Ä–æ—Å–∞ {question_number}: {e}")
        return None

def scrape_all_tickets():
    """–ü–∞—Ä—Å–∏–º –≤—Å–µ –±–∏–ª–µ—Ç—ã"""
    create_directories()
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å examenpdd.com")
    print("=" * 60)
    
    all_tickets = []
    successful_tickets = 0
    
    for ticket_num in range(1, 41):  # –ë–∏–ª–µ—Ç—ã —Å 1 –ø–æ 40
        print(f"\n{'='*20} –ë–ò–õ–ï–¢ {ticket_num} {'='*20}")
        
        ticket_data = parse_ticket(ticket_num)
        
        if ticket_data:
            all_tickets.append(ticket_data)
            successful_tickets += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            ticket_file = f"data/ticket_{ticket_num:02d}.json"
            with open(ticket_file, 'w', encoding='utf-8') as f:
                json.dump(ticket_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –ë–∏–ª–µ—Ç {ticket_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {ticket_file}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –±–∏–ª–µ—Ç {ticket_num}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    all_data = {
        "total_tickets": len(all_tickets),
        "successful_tickets": successful_tickets,
        "scraped_at": time.strftime("%Y-%m-%d %H:%M:%S"),
        "source": "https://examenpdd.com/",
        "tickets": all_tickets
    }
    
    with open('data/all_tickets.json', 'w', encoding='utf-8') as f:
        json.dump(all_data, f, ensure_ascii=False, indent=2)
    
    print("\n" + "=" * 60)
    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {successful_tickets}/40")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: data/")
    print(f"üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: data/all_tickets.json")
    print(f"üìÑ –û—Ç–¥–µ–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã: data/ticket_XX.json")
    
    return all_data

def create_summary_report(data):
    """–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
    report = {
        "summary": {
            "total_tickets": data["total_tickets"],
            "successful_tickets": data["successful_tickets"],
            "total_questions": sum(ticket["total_questions"] for ticket in data["tickets"]),
            "questions_with_images": 0,
            "questions_with_hints": 0
        },
        "tickets_details": []
    }
    
    for ticket in data["tickets"]:
        ticket_info = {
            "ticket_number": ticket["ticket_number"],
            "questions_count": ticket["total_questions"],
            "questions_with_images": 0,
            "questions_with_hints": 0
        }
        
        for question in ticket["questions"]:
            if question.get("image_path"):
                ticket_info["questions_with_images"] += 1
                report["summary"]["questions_with_images"] += 1
            
            if question.get("hint") and question["hint"] != "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞":
                ticket_info["questions_with_hints"] += 1
                report["summary"]["questions_with_hints"] += 1
        
        report["tickets_details"].append(ticket_info)
    
    with open('data/summary_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: data/summary_report.json")
    return report

if __name__ == "__main__":
    print("üîç –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å examenpdd.com")
    print("üìã –ü–∞—Ä—Å–∏–º: –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤, –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥—Å–∫–∞–∑–∫–∏")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("‚è±Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-15 –º–∏–Ω—É—Ç...")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = scrape_all_tickets()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç...")
    report = create_summary_report(data)
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÅ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'data/'")
    print(f"üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: data/all_tickets.json")
    print(f"üìä –û—Ç—á–µ—Ç: data/summary_report.json")
    print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: data/images/tickets/")








