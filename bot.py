import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8396554677:AAFIueItKdKENDA0_TeNviTsTawPBTkqV7A"

# ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
RECIPIENT_ID = 7644513746

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"{username}, –ø—Ä–∏–≤–µ—Ç üëã\n\nüì≤ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ EasyDrive. –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã, —Ä–µ—à–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∏ –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä—ã ‚Äî –≤—Å—ë –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Å–¥–∞—á–∏ –Ω–∞ –ø—Ä–∞–≤–∞.\n\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"

    await message.answer(
        text=welcome_text
    )

@dp.message()
async def handle_form_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ
        data = json.loads(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã
        if 'form_type' in data:
            form_type = data['form_type']
            
            if form_type == 'lawyer':
                await send_lawyer_data(data)
            elif form_type == 'psychologist':
                await send_psychologist_data(data)
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ä–º—ã")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except json.JSONDecodeError:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

async def send_lawyer_data(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—é—Ä–∏—Å—Ç–∞"""
    try:
        message_text = f"""
‚öñÔ∏è <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ê–í–¢–û–Æ–†–ò–°–¢–ê</b>

üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìù <b>–°–∏—Ç—É–∞—Ü–∏—è:</b> {data.get('situation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üïê <b>–í—Ä–µ–º—è:</b> {data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        await bot.send_message(
            chat_id=RECIPIENT_ID,
            text=message_text,
            parse_mode='HTML'
        )
        
        logging.info(f"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—é—Ä–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {data}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—é—Ä–∏—Å—Ç–∞: {e}")

async def send_psychologist_data(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
    try:
        message_text = f"""
üß† <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ê–í–¢–û–ü–°–ò–•–û–õ–û–ì–ê</b>

üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìù <b>–°–∏—Ç—É–∞—Ü–∏—è:</b> {data.get('situation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üïê <b>–í—Ä–µ–º—è:</b> {data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        await bot.send_message(
            chat_id=RECIPIENT_ID,
            text=message_text,
            parse_mode='HTML'
        )
        
        logging.info(f"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {data}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞: {e}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
